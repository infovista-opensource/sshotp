// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package app

import (
	"sync/atomic"
	"time"
	"unsafe"
)

// Options should use NewOptions to initialize it
type Options struct {
	// annotation@EnvName(comment="use value environment variable as password")
	EnvName string `xconf:"env_name" usage:"use value environment variable as password"`
	// annotation@Password(comment="plaintext password (not recommended)")
	Password string `xconf:"password" usage:"plaintext password (not recommended)"`
	// annotation@Timeout(comment="timeout length to wait for prompt/confirmation")
	Timeout time.Duration `xconf:"timeout" usage:"timeout length to wait for prompt/confirmation"`
	// annotation@DisableConfirmHostAuthenticity(xconf="disable-ssh-host-confirm",comment="sshpass will automatically confirm the authenticity of SSH hosts unless this option is specified")
	DisableConfirmHostAuthenticity bool `xconf:"disable-ssh-host-confirm" usage:"sshpass will automatically confirm the authenticity of SSH hosts unless this option is specified"`
	// annotation@Shell(comment="Shell is a path to the shell to use e.g. /bin/bash - leave blank to use user shell")
	Shell string `xconf:"shell" usage:"Shell is a path to the shell to use e.g. /bin/bash - leave blank to use user shell"`
	// annotation@ExpectedPrompt(comment="the string to treat as the password prompt")
	ExpectedPrompt string `xconf:"expected_prompt" usage:"the string to treat as the password prompt"`
	// annotation@ExpectedFailure(comment="the string to treat as an indication of failure")
	ExpectedFailure string `xconf:"expected_failure" usage:"the string to treat as an indication of failure"`
}

// NewOptions new Options
func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

// ApplyOption apply multiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *Options) ApplyOption(opts ...Option) []Option {
	var previous []Option
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// Option option func
type Option func(cc *Options) Option

// WithEnvName use value environment variable as password
func WithEnvName(v string) Option {
	return func(cc *Options) Option {
		previous := cc.EnvName
		cc.EnvName = v
		return WithEnvName(previous)
	}
}

// WithPassword plaintext password (not recommended)
func WithPassword(v string) Option {
	return func(cc *Options) Option {
		previous := cc.Password
		cc.Password = v
		return WithPassword(previous)
	}
}

// WithTimeout timeout length to wait for prompt/confirmation
func WithTimeout(v time.Duration) Option {
	return func(cc *Options) Option {
		previous := cc.Timeout
		cc.Timeout = v
		return WithTimeout(previous)
	}
}

// WithDisableConfirmHostAuthenticity sshpass will automatically confirm the authenticity of SSH hosts unless this option is specified
func WithDisableConfirmHostAuthenticity(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.DisableConfirmHostAuthenticity
		cc.DisableConfirmHostAuthenticity = v
		return WithDisableConfirmHostAuthenticity(previous)
	}
}

// WithShell Shell is a path to the shell to use e.g. /bin/bash - leave blank to use user shell
func WithShell(v string) Option {
	return func(cc *Options) Option {
		previous := cc.Shell
		cc.Shell = v
		return WithShell(previous)
	}
}

// WithExpectedPrompt the string to treat as the password prompt
func WithExpectedPrompt(v string) Option {
	return func(cc *Options) Option {
		previous := cc.ExpectedPrompt
		cc.ExpectedPrompt = v
		return WithExpectedPrompt(previous)
	}
}

// WithExpectedFailure the string to treat as an indication of failure
func WithExpectedFailure(v string) Option {
	return func(cc *Options) Option {
		previous := cc.ExpectedFailure
		cc.ExpectedFailure = v
		return WithExpectedFailure(previous)
	}
}

// InstallOptionsWatchDog the installed func will called when NewOptions  called
func InstallOptionsWatchDog(dog func(cc *Options)) { watchDogOptions = dog }

// watchDogOptions global watch dog
var watchDogOptions func(cc *Options)

// newDefaultOptions new default Options
func newDefaultOptions() *Options {
	cc := &Options{}

	for _, opt := range [...]Option{
		WithEnvName(""),
		WithPassword(""),
		WithTimeout(time.Second * 10),
		WithDisableConfirmHostAuthenticity(false),
		WithShell(""),
		WithExpectedPrompt("password:"),
		WithExpectedFailure("denied"),
	} {
		opt(cc)
	}

	return cc
}

// AtomicSetFunc used for XConf
func (cc *Options) AtomicSetFunc() func(interface{}) { return AtomicOptionsSet }

// atomicOptions global *Options holder
var atomicOptions unsafe.Pointer

// onAtomicOptionsSet global call back when  AtomicOptionsSet called by XConf.
// use OptionsInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicOptions
var onAtomicOptionsSet func(cc OptionsInterface) bool

// InstallCallbackOnAtomicOptionsSet install callback
func InstallCallbackOnAtomicOptionsSet(callback func(cc OptionsInterface) bool) {
	onAtomicOptionsSet = callback
}

// AtomicOptionsSet atomic setter for *Options
func AtomicOptionsSet(update interface{}) {
	cc := update.(*Options)
	if onAtomicOptionsSet != nil && !onAtomicOptionsSet(cc) {
		return
	}
	atomic.StorePointer(&atomicOptions, (unsafe.Pointer)(cc))
}

// AtomicOptions return atomic *OptionsVisitor
func AtomicOptions() OptionsVisitor {
	current := (*Options)(atomic.LoadPointer(&atomicOptions))
	if current == nil {
		defaultOne := newDefaultOptions()
		if watchDogOptions != nil {
			watchDogOptions(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicOptions, nil, (unsafe.Pointer)(defaultOne))
		return (*Options)(atomic.LoadPointer(&atomicOptions))
	}
	return current
}

// all getter func
func (cc *Options) GetEnvName() string                      { return cc.EnvName }
func (cc *Options) GetPassword() string                     { return cc.Password }
func (cc *Options) GetTimeout() time.Duration               { return cc.Timeout }
func (cc *Options) GetDisableConfirmHostAuthenticity() bool { return cc.DisableConfirmHostAuthenticity }
func (cc *Options) GetShell() string                        { return cc.Shell }
func (cc *Options) GetExpectedPrompt() string               { return cc.ExpectedPrompt }
func (cc *Options) GetExpectedFailure() string              { return cc.ExpectedFailure }

// OptionsVisitor visitor interface for Options
type OptionsVisitor interface {
	GetEnvName() string
	GetPassword() string
	GetTimeout() time.Duration
	GetDisableConfirmHostAuthenticity() bool
	GetShell() string
	GetExpectedPrompt() string
	GetExpectedFailure() string
}

// OptionsInterface visitor + ApplyOption interface for Options
type OptionsInterface interface {
	OptionsVisitor
	ApplyOption(...Option) []Option
}
